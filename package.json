{
  "name": "koa-better-body",
  "version": "0.0.2",
  "description": "A koa body parser middleware. Support multipart, urlencoded and json request bodies.",
  "scripts": {
    "start": "make start",
    "test": "make test"
  },
  "author": {
    "name": "Charlike Mike Reagent",
    "email": "mameto_100@mail.bg",
    "url": "https://github.com/tunnckoCore"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tunnckoCore/koa-better-body.git"
  },
  "keywords": [
    "koa",
    "urlencoded",
    "multipart",
    "json",
    "body",
    "parser",
    "form"
  ],
  "files": [
    ".gitignore",
    ".npmignore",
    ".travis.yml",
    "LICENSE",
    "Makefile",
    "README.md",
    "example.js",
    "index.js",
    "test.js"
  ],
  "dependencies": {
    "co-body": "*",
    "formidable": "1.0.15"
  },
  "devDependencies": {
    "koa": "*",
    "koa-router": "*",
    "multiline": "*",
    "mocha": "*",
    "should": "*",
    "supertest": "*"
  },
  "license": "MIT",
  "readme": "koa-better-body [![Build Status](https://travis-ci.org/tunnckoCore/koa-better-body.png)](https://travis-ci.org/tunnckoCore/koa-better-body) [![Dependencies Status](https://david-dm.org/tunnckoCore/koa-better-body/status.svg)](https://david-dm.org/dlau/koa-better-body)\n================\n\n> A full-feature [`koa`](https://github.com/koajs/koa) body parser middleware. Support `multipart`, `urlencoded` and `json` request bodies. Provides same functionality as Express's bodyParser - [`multer`](https://github.com/expressjs/multer). And all that is wrapped only around\n[`co-body`](https://github.com/visionmedia/co-body) and [`formidable`](https://felixge/node-formidable).\n\n\n## Install\n>Install with [npm](https://github.com/npm/npm)\n\n```\n$ npm install koa-better-body\n```\n\n\n## Features\n- 15 tests\n- can handle three type requests\n  * **multipart/form-data**\n  * **application/x-www-urlencoded**\n  * **application/json**\n- option for patch to Koa or Node, or either\n- file uploads\n- body, fields and files limiting\n- 2 dependencies only\n\n\n## Usage like [multer](https://github.com/expressjs/multer)\n> It's very simple, because you can access the fields and files in the `ctx.request.body` or `ctx.req.body` JSON object\n\n```js\nvar app      = require('koa')(),\n    bulter   = require('./index');\n\napp.use(bulter({uploadDir: __dirname}));\napp.use(function *(next) {\n  if (this.request.method == 'POST') {\n    console.log(this.request.body);\n    // => POST body\n    this.body = JSON.stringify(this.request.body, null, 2);\n  }\n  yield next;\n});\napp.listen(3131)\nconsole.log('curl -i -X http://localhost:3131/ -d \"name=test\"');\n```\n\n## Usage with [koa-router](https://github.com/alexmingoia/koa-router)\n> It's generally better to only parse the body as needed, if using a router that supports middleware composition, we can inject it only for certain routes.\n\n```js\nvar app       = require('koa')(),\n    router    = require('koa-router'),\n    koaBody   = require('./index')(/*defaults*/);\n    multiline = require('multiline');\n\napp.use(router(app));\n\napp.post('/users', koaBody,\n  function *(next) {\n    console.log(this.request.body);\n    // => POST body\n    this.body = JSON.stringify(this.request.body, null, 2);\n    yield next;\n  }\n);\napp.get('/', function *(next) {\n  this.set('Content-Type', 'text/html');\n  this.body = multiline.stripIndent(function(){/*\n      <!doctype html>\n      <html>\n          <body>\n              <form action=\"/\" enctype=\"multipart/form-data\" method=\"post\">\n              <input type=\"text\" name=\"username\" placeholder=\"username\"><br>\n              <input type=\"text\" name=\"title\" placeholder=\"tile of film\"><br>\n              <input type=\"file\" name=\"uploads\" multiple=\"multiple\"><br>\n              <button type=\"submit\">Upload</button>\n          </body>\n      </html>\n  */});\n});\napp.post('/', koaBody,\n  function *(next) {\n    console.log(this.request.body.fields);\n    // => {username: \"\"} - if empty\n\n    console.log(this.request.body.files);\n    /* => {uploads: [\n            {\n              \"size\": 748831,\n              \"path\": \"/tmp/f7777b4269bf6e64518f96248537c0ab.png\",\n              \"name\": \"some-image.png\",\n              \"type\": \"image/png\",\n              \"mtime\": \"2014-06-17T11:08:52.816Z\"\n            },\n            {\n              \"size\": 379749,\n              \"path\": \"/tmp/83b8cf0524529482d2f8b5d0852f49bf.jpeg\",\n              \"name\": \"nodejs_rulz.jpeg\",\n              \"type\": \"image/jpeg\",\n              \"mtime\": \"2014-06-17T11:08:52.830Z\"\n            }\n          ]}\n    */\n   this.body = JSON.stringify(this.request.body, null, 2)\n   yield next;\n  }\n)\n\nvar port = process.env.PORT || 3333;\napp.listen(port);\nconsole.log('Koa server with `koa-better-body` parser start listening to port %s', port);\nconsole.log('curl -i -X http://localhost:%s/users -d \"user=admin\"', port);\nconsole.log('curl http://localhost:%s/ -F \"source=@/path/to/file.png\"', port);\n```\n\n\n## Options\n> Options available for `koa-better-body`. Four custom options, and others are from `raw-body` and `formidable`.\n\n- `patchNode` **{Boolean}** Patch request body to Node's `ctx.req`, default `false`\n- `patchKoa` **{Boolean}** Patch request body to Koa's `ctx.request`, default `true`\n- `jsonLimit` **{String|Integer}** The byte limit of the JSON body, default `1mb`\n- `formLimit` **{String|Integer}** The byte limit of the form body, default `56kb`\n- `encoding` **{String}** Sets encoding for incoming form fields, default `utf-8`\n- `uploadDir` **{String}** Sets the directory for placing file uploads in, default `os.tmpDir()`\n- `keepExtensions` **{Boolean}** Files written to `uploadDir` will include the extensions of the original files, default `true`\n- `maxFields` **{Integer}** Limits the number of fields that the querystring parser will decode, default `10`\n- `maxFieldsSize` **{Integer}** Limits the amount of memory a field (not file) can allocate _in bytes_, default `2mb`\n- `hash` **{String}** If you want checksums calculated for incoming files, set this to either `'sha1'` or `'md5'`, default `false`\n- `multiples` **{Boolean}** Multiple file uploads or no, default `true`\n- `bytesExpected` **{Integer}** The expected number of bytes in this form, default `null`\n\n**Note**: You can patch request body to Node or Koa in same time if you want.\n\n\n## Test, Bench, Example\n> First run `npm install` before run anything.\n\n```\n$ npm test\n$ npm start\n```\n\n\n## License\nThe MIT License, 2014 [Charlike Mike Reagent](https://github.com/tunnckoCore) ([@tunnckoCore](https://twitter.com/tunnckoCore))",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tunnckoCore/koa-better-body/issues"
  },
  "homepage": "https://github.com/tunnckoCore/koa-better-body",
  "_id": "koa-better-body@0.0.2",
  "_shasum": "eeb705296ac5c37521d7e1684d0ec29e96938fb1",
  "_from": "koa-better-body"
}
